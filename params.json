{"name":"Redis RDB Tools","body":"# Tools to inspect Redis's dump.rdb file #\r\n\r\nRDB Tools is a set of tools to work with Redis dump files\r\n\r\nrdb-tools lets you : \r\n \r\n 1.  Convert dump files into JSON\r\n 2.  Generate a Memory Report of your data across all databases and keys\r\n 3.  Compare two dump files using standard diff tools\r\n 4.  Efficiently parse and process rdb files\r\n\r\nRDB Tools is implemented in Python. \r\n\r\n## Installing rdbtools ##\r\n\r\n    git checkout git@github.com:sripathikrishnan/redis-rdb-tools.git\r\n    cd redis-rdb-tools\r\n    sudo python setup.py install\r\n\r\n## Converting dump files to JSON ##\r\n\r\nParse the dump file and print the JSON on standard output\r\n\r\n    ./rdb --command json /var/redis/6379/dump.rdb\r\n    \r\nOnly process keys that match the regex\r\n\r\n    ./rdb --command json --key \"user.*\" /var/redis/6379/dump.rdb\r\n    \r\nOnly process hashes starting with \"a\", in database 2 \r\n\r\n    ./rdb --command json --db 2 --type hash --key \"a.*\" /var/redis/6379/dump.rdb\r\n\r\n\r\n## Generate Memory Report ##\r\nRunning with the  `-c memory` generates a CSV report with the approximate memory used by that key.\r\n\r\n    ./rdb -c memory /var/redis/6379/dump.rdb > memory.csv\r\n\r\n\r\nThe generated CSV has the following columns - Database Number, Data Type, Key, Memory Used in bytes and Encoding. \r\nMemory usage includes the key, the value and any other overheads.\r\n\r\nNote that the memory usage is approximate. In general, the actual memory used will be slightly higher than what is reported.\r\n\r\nYou can filter the report on keys or database number or data type.\r\n\r\n## Comparing RDB files ##\r\n\r\nFirst, use the --command diff option, and pipe the output to standard sort utility\r\n\r\n    ./rdb --command diff /var/redis/6379/dump1.rdb | sort > dump1.txt\r\n    ./rdb --command diff /var/redis/6379/dump2.rdb | sort > dump2.txt\r\n    \r\nThen, run your favourite diff program\r\n\r\n    kdiff3 dump1.txt dump2.txt\r\n\r\nTo limit the size of the files, you can filter on keys using the --key=regex option\r\n\r\n## Using the Parser ##\r\n\r\n    import sys\r\n    from rdbtools import RdbParser, RdbCallback\r\n\r\n    class MyCallback(RdbCallback) :\r\n        ''' Simple example to show how callback works. \r\n            See RdbCallback for all available callback methods.\r\n            See JsonCallback for a concrete example\r\n        ''' \r\n        def set(self, key, value, expiry):\r\n            print('%s = %s' % (str(key), str(value)))\r\n        \r\n        def hset(self, key, field, value):\r\n            print('%s.%s = %s' % (str(key), str(field), str(value)))\r\n        \r\n        def sadd(self, key, member):\r\n            print('%s has {%s}' % (str(key), str(member)))\r\n        \r\n        def rpush(self, key, value) :\r\n            print('%s has [%s]' % (str(key), str(value)))\r\n        \r\n        def zadd(self, key, score, member):\r\n            print('%s has {%s : %s}' % (str(key), str(member), str(score)))\r\n\r\n    callback = MyCallback()\r\n    parser = RdbParser(callback)\r\n    parser.parse('/var/redis/6379/dump.rdb')\r\n\r\n## What can I do with this parser?\r\nSeveral things \r\n\r\n 1.  Export redis into a relational database like MySQL\r\n 2.  Export redis into a full text search engine like lucene/solr, so that you can do (almost) real time searches\r\n 3.  Merge or split dump files. This is useful if you using several instances of Redis and shard your data\r\n 4.  Build a UI/Explorer for the data in Redis\r\n\r\n","tagline":"Parse Redis dump.rdb files, Analyze Memory, and Export Data","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}